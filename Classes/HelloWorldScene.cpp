#include "HelloWorldScene.h"
#include "LuaEngine.h"
#include "UndertaleResources.h"
#include "lua.hpp"
#include "LuaFont.h"
#include "AudioEngine.h"

#include "obj_gasterblaster.h"

USING_NS_CC;
using namespace experimental;
static int tags = 1001;
static HelloWorld* lua_hack = nullptr;
/*
** Check whether 'status' is not OK and, if so, prints the error
** message on the top of the stack. It assumes that the error object
** is a string, as it was either generated by Lua or by 'msghandler'.
*/
static int lua_report(lua_State *L, int status) {
	if (status != LUA_OK) {
		const char *msg = lua_tostring(L, -1);
		CCLOGERROR("%s\n", msg);
		lua_pop(L, 1);  /* remove message */
	}
	return status;
}

static int lua_setPos(lua_State*L) {
	int tag = luaL_checkinteger(L, 1);
	lua_Number x = luaL_checknumber(L, 2);
	lua_Number y = luaL_checknumber(L, 3);
	lua_hack->getChildByTag(tag)->setPosition(x, y);
	return 0;
}
static int lua_movePos(lua_State*L) {
	int tag = luaL_checkinteger(L, 1);
	lua_Number x = luaL_checknumber(L, 2);
	lua_Number y = luaL_checknumber(L, 3);
	Node* node = lua_hack->getChildByTag(tag);

	Vec2 pos = node->getPosition() + Vec2(x, y);
	node->setPosition(pos);
	return 0;
}

static int lua_addsprite(lua_State* L) {
	const char* spriteName =  luaL_checkstring(L, 1);
	lua_Number x = luaL_checknumber(L, 2);
	lua_Number y = luaL_checknumber(L, 3);
	int frame = luaL_checkinteger(L, 4);
	//Size visibleSize = Director::getInstance()->getVisibleSize();
	//Vec2 origin = Director::getInstance()->getVisibleOrigin();
	UndertaleResources* res = UndertaleResources::getInstance();
	Sprite* sprite = res->getInstance()->createSprite(spriteName, frame);
	sprite->setPosition(x, y);
	sprite->setTag(tags);
	lua_pushinteger(L, tags++);
	lua_hack->addChild(sprite, 1);
	return 1;
}
Scene* HelloWorld::createScene()
{
    // 'scene' is an autorelease object
    auto scene = Scene::create();
    
    // 'layer' is an autorelease object
    auto layer = HelloWorld::create();

    // add layer as a child to scene
    scene->addChild(layer);

    // return the scene
    return scene;
}

// on "init" you need to initialize your instance
bool HelloWorld::init()
{
    //////////////////////////////
    // 1. super init first
    if ( !Layer::init() )
    {
        return false;
    }
    Size visibleSize = Director::getInstance()->getVisibleSize();
    Vec2 origin = Director::getInstance()->getVisibleOrigin();
	UndertaleResources* res = UndertaleResources::getInstance();
    /////////////////////////////
    // 2. add a menu item with "X" image, which is clicked to quit the program
    //    you may modify it.

    // add a "close" icon to exit the progress. it's an autorelease object
 //   auto closeItem = MenuItemImage::create(
  //                                         "CloseNormal.png",
   //                                        "CloseSelected.png",
    //                                       CC_CALLBACK_1(HelloWorld::menuCloseCallback, this));
	bool mute = false;
	int musicID;
	if (AudioEngine::lazyInit()) {

	//	auto musicID = AudioEngine::play2d("music\\mus_zz_megalovania.ogg", true);
		//AudioEngine::setVolume(musicID, 0.25f);
	}

	// sprite
	Undertale::obj_gasterblaster* test = Undertale::obj_gasterblaster::create();
	testSprite = test;
	test->setupBullet(Vec2(300, 300));

//	auto closeItem = MenuItemImage::create("CloseNormal.png","CloseSelected.png", [](Ref* r) {  Director::getInstance()->end(); });
	auto muteItem = MenuItemImage::create("CloseNormal.png", "CloseSelected.png", [this](Ref* r) {
	//	AudioEngine::setVolume(musicID, mute ? 0.0f : 1.0f);
	//	mute = !mute;
		Undertale::obj_gasterblaster* test = dynamic_cast<Undertale::obj_gasterblaster*>(testSprite);
		test->fireBullet();
	});
	
	//closeItem->setPosition(Vec2(origin.x + visibleSize.width - closeItem->getContentSize().width/2 ,  origin.y + closeItem->getContentSize().height/2));
	muteItem->setPosition(Vec2(origin.x + visibleSize.width - muteItem->getContentSize().width / 2,
		origin.y + muteItem->getContentSize().height / 2));

    // create menu, it's an autorelease object
    auto menu = Menu::create(muteItem, NULL);
    menu->setPosition(Vec2::ZERO);
    this->addChild(menu, 1);

    /////////////////////////////
    // 3. add your codes below...



    // add "HelloWorld" splash screen"
  ///  auto sprite = Sprite::create("HelloWorld.png");

  

	


	


	addChild(testSprite, 1);

	/*

	const Vector<SpriteFrame*>* frames = res->getSpriteFrames("spr_doglick");
	Animation* animation = Animation::createWithSpriteFrames(*frames, 0.15f);
	Animate* animate = Animate::create(animation);

	auto sprite = Sprite::createWithSpriteFrame(frames->at(4));
	// position the sprite on the center of the screen
	sprite->setPosition(Vec2(visibleSize.width / 2 + origin.x, visibleSize.height / 2 + origin.y));

	// add the sprite as a child to this layer
	sprite->runAction(animate);
	this->addChild(sprite, 0);
	*/
	
	/*
	auto label = LuaLabel::create("fnt_main");
	if (!label) {
	label->setString("Hello Undertale\nNextLine");
	label->setPosition(Vec2(visibleSize.width / 2 + origin.x, visibleSize.height / 2 + origin.y));
	// add the label as a child to this layer
	this->addChild(label, 1);
	}
	*/
	auto label = LuaLabel::create("fnt_main.fnt", 2,0.5f);
	
	//this->addChild(label, 1);
		//label->setString("Hello Undertale\nNextLine");
		//label->setPosition(Vec2(visibleSize.width / 2 + origin.x, visibleSize.height / 2 + origin.y));
	const char* test_str = "\\E2* If you truly wish to&  leave the RUINS.../* I will not stop you./\\E2* However^1, when you&  leave.../\\E1* Please do not come&  back./\\E2* I hope you understand./%%";
	const char* test_str2 = "\XLa, la.^3 &Time to wake&up and\\R smell\\X &the^4 pain./* Though^2.^4.^6.^8.&It's still a&little shaky./* Though^2.^4.^6.^8.&It's still a&little shaky./fhuehfuehfuehfuheufhe / %";
	
	
	label->setPosition(200, 200);
		label->setTypingSound("snd_txtasr.wav");
		// add the label as a child to this layer
		this->addChild(label, 1);
		label->setString(test_str2); // "facemotionEvent"), _facemovement_event("facemovementEvent")
		EventListenerCustom* listener = EventListenerCustom::create("facemotionEvent", [=](EventCustom* event) {
			CCLOG("FaceMotionEvent : %i", (int)(event->getUserData()));
		});

		_eventDispatcher->addEventListenerWithFixedPriority(listener, 1);
		listener = EventListenerCustom::create("facemovementEvent", [=](EventCustom* event) {
			CCLOG("FaceMovementEvent : %i", (int)(event->getUserData()));
		});
		_eventDispatcher->addEventListenerWithFixedPriority(listener, 1);
		label->restartTyping();
		//	global.msg[0] = "\\E2* If you truly wish to&  leave the RUINS.../"
		//	global.msg[1] = "* I will not stop you./"
		////	global.msg[2] = "\\E2* However^1, when you&  leave.../"

	// add a label shows "Hello World"
	// create and initialize a label

	//auto label = Label::createWithTTF("Hello Undertale", "fonts/Marker Felt.ttf", 24);

	// position the label on the center of the screen
	//label->setPosition(100, 100); // Vec2(origin.x + visibleSize.width / 2, origin.y + visibleSize.height - label->getContentSize().height));
	

	LuaEngine::setLuaScene(this);
	lua_State* L = LuaEngine::getLuaState();

	int ret = luaL_loadfile(L, "D:\\luascripts\\startup.lua");
	if (LuaEngine::DoFile("D:\\luascripts\\startup.lua") ){
		//int ret = luaL_loadstring(L, "local tag = UndertaleSprite(\"spr_doglick\",200,200,4)\n\nfunction loop(dt)\n MoveSprite(tag,1,1)\n end\n ");
		//	assert(ret == 0);
		//	lua_pcall(L, 0, 1, 0);
		this->scheduleUpdate();
		
	}
	

	//mus_zz_megalovania.ogg

	return true;
}

int HelloWorld::lua_startup(lua_State * L)
{
	return 0;
}

int HelloWorld::lua_step(lua_State * L)
{
	return 0;
}


void HelloWorld::menuCloseCallback(Ref* pSender)
{
    Director::getInstance()->end();

#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
    exit(0);
#endif
}

void HelloWorld::update(float dt)
{
	lua_State* L = LuaEngine::getLuaState();
	lua_getglobal(L, "loop");
	if(!LuaEngine::RunGlobalUpdate("loop",dt)) this->unscheduleUpdate();
//	lua_pushnumber(L, dt);
	//int status = lua_pcall(L, 1, 0, 0);
//	if (lua_report(L, status) != LUA_OK) this->unscheduleUpdate();
	
	//	lua_call(L, 1, 0);
}
